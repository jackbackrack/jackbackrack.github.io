<html>
<!-- #BeginTemplate "/Templates/project.dwt" --> 
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Efficient Dylan Dispatch</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body bgcolor="#9999FF">
<table width="75%" border="0" align="left">
  <tr align="center" valign="middle"> 
    <td colspan="2" height="30"><i><font face="Arial, Helvetica, sans-serif"><b><font size="7"><!-- #BeginEditable "name" -->Efficient 
      Dispatch for Dylan<!-- #EndEditable --></font></b></font></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#FF3333" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">What</font></b></td>
    <td align="left"><i><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "description" -->I 
      am investigating predicate dispatch, its efficient general implementation, 
      and results in using these techniques for implementing the Dylan programming 
      language's method dispatch mechanism. Predicate dispatch [ErnstKaplanChambers-ECOOP-98] 
      provides a generalization of other method dispatch techniques through the 
      utilization of arbitrary predicates to control method applicability and 
      logical implication between predicates to determine method overriding. It 
      generalizes previous object-oriented single and multimethod dispatch, ML-style 
      pattern matching, predicate classes, and classifiers. An efficient predicate 
      dispatch implementation technique [ChambersChen-OOPSLA-99] involves reducing 
      general predicate dispatch into multidispatch using a canonicalization process, 
      mapping multidispatch onto a sequence of single dispatches through the construction 
      of a decision DAG, and finally implementing single dispatch in terms of 
      a binary search. Dylan provides a rich set of built-in types and a powerful 
      multimethod dispatch mechanism that present several challenges to the predicate 
      dispatch mechanism and its implementation. I have worked out a mapping of 
      Dylan types onto predicate types, a dynamic x86 code generator, and several 
      improvements over the general implementation strategy. This work will lay 
      the foundation for an upcoming research on advanced implementation issues 
      such as redefinition, multiple threads, call-site caches, and dynamic construction. 
      <!-- #EndEditable --></font></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#00CC99" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">Which</font></b></td>
    <td align="left"><i><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "deliverables" -->Turbo 
      Charger for Fun-O Dylan. <a href="dylan-dispatch.ppt">Talk at MIT AI Lab</a>.<!-- #EndEditable --></font></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#FF00FF" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">Why</font></b></td>
    <td align="left"><i><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "contributions" -->Faster 
      Dispatch in the face of incrementality, powerful dynamic types, and separate 
      compilation.<!-- #EndEditable --></font></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#FFFF00" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">Who</font></b></td>
    <td align="left"><i><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "researchers" -->Jonathan 
      Bachrach <!-- #EndEditable --></font></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#FF6633" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">How</font></b></td>
    <td align="left"><i><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "language" -->Dylan<!-- #EndEditable --></font></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#3399FF" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">When</font></b></td>
    <td align="left"><i><!-- #BeginEditable "when" --><i><font face="Arial, Helvetica, sans-serif">2000 
      and beyond</font></i><!-- #EndEditable --></i></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#FF0066" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">Where</font></b></td>
    <td align="left"><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "where" --><font face="Arial, Helvetica, sans-serif"><i>MIT 
      AI Lab</i></font><!-- #EndEditable --></font></td>
  </tr>
  <tr> 
    <td height="30" bgcolor="#999999" width="150" align="center" valign="middle"><b><font face="Courier New, Courier, mono" size="+2">And</font></b></td>
    <td align="left"><i><font face="Arial, Helvetica, sans-serif"><!-- #BeginEditable "subprojects" --><!-- #EndEditable --></font></i></td>
  </tr>
</table>
</body>
<!-- #EndTemplate -->
</html>
